// Mocks generated by Mockito 5.0.4 from annotations
// in myapp/test/features/login/presentation/bloc/bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:myapp/core/error/failures.dart' as _i6;
import 'package:myapp/features/login/domain/repositories/login_repository.dart'
    as _i2;
import 'package:myapp/features/login/domain/usecases/login_with_credentials.dart'
    as _i4;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeLoginRepository extends _i1.Fake implements _i2.LoginRepository {}

class _FakeEither<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [LoginWithCredentials].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginWithCredentials extends _i1.Mock
    implements _i4.LoginWithCredentials {
  MockLoginWithCredentials() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginRepository get loginRepository =>
      (super.noSuchMethod(Invocation.getter(#loginRepository),
          returnValue: _FakeLoginRepository()) as _i2.LoginRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i4.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, bool>>.value(
                  _FakeEither<_i6.Failure, bool>()))
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
